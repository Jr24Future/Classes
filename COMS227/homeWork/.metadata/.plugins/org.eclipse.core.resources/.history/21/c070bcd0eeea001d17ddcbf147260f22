package hw4;


import api.Point;
import api.PointPair;
import api.PositionVector;

public class MultiSwitchLink extends AbstractLink{
	 
	/**
	 * The saved value of which PointPair will be used when the train passes through this link
	 */
	private PointPair pairs = null;
	
	/**
	 * Constructor for MultiSwitchLink
	 * @param connections given list of PointPairs
	 */
	public MultiSwitchLink(PointPair[] connections){
		super(connections);
		pairs = connections[0];
	}
	
	/**
	 * When used on a MultiSwitchLink, will change which point pair is used as it moves through the link.
	 * -Will have no effect on other links
	 * 
	 * @param pointPair The new point pair that the link will use
	 * 
	 * @param index Honestly, I haven't figured this one out yet
	 */
	public void switchConnection(PointPair pointPair, int index) {
		pairs = pointPair;
	}

	
	
	
	
	@Override
	public void shiftPoints(PositionVector positionVector) {
		for (PointPair pair : pairs) {
            if (positionVector.getPointA() == pair.getPointA()) {
                positionVector.setPointA(pair.getPointB());
            } else if (positionVector.getPointA() == pair.getPointB()) {
                positionVector.setPointA(pair.getPointA());
            }
            if (positionVector.getPointB() == pair.getPointA()) {
                positionVector.setPointB(pair.getPointB());
            } else if (positionVector.getPointB() == pair.getPointB()) {
                positionVector.setPointB(pair.getPointA());
            }
        }
		
	}

	@Override
	public Point getConnectedPoint(Point point) {
		for (PointPair pair : pairs) {
            if (point.equals(pair.getPointA())) {
                return pair.getPointB();
            } else if (point.equals(pair.getPointB())) {
                return pair.getPointA();
            }
        }
        return null;
	}

	@Override
	public int getNumPaths() {
		// TODO Auto-generated method stub
		return pairs.length * 2;
	}

}
