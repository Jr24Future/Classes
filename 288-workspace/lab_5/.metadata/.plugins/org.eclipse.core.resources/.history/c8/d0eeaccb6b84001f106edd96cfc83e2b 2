

#include "button.h"
#include "timer.h"
#include "lcd.h"

#include "cyBot_uart.h"
#include "cyBot_Scan.h"


#warning "Possible unimplemented functions"
#define REPLACEME 0



extern volatile int button_event;
extern volatile int button_num;

float distances[] = {9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 50};
int ir_values[] = {1499, 1277, 1147, 1087, 987, 955, 919, 877, 842, 833, 803, 795, 779, 751, 731};


float calculate_distance_linear(int raw_ir) {
    int i;

    // If the raw IR value is greater than the largest value, return the closest distance
    if (raw_ir >= ir_values[0]) {
        return distances[0];
    }

    // If the raw IR value is less than the smallest value, return the closest distance
    if (raw_ir <= ir_values[14]) {
        return distances[14];
    }

    // Find two points between which the raw IR value lies
    for (i = 0; i < 14; i++) {
        if (raw_ir <= ir_values[i] && raw_ir > ir_values[i + 1]) {
            // Perform linear interpolation
            float slope = (distances[i + 1] - distances[i]) / (ir_values[i + 1] - ir_values[i]);
            return distances[i] + slope * (raw_ir - ir_values[i]);
        }
    }
    return -1; // Default case, should not reach here
}

void move_forward() {
    lcd_printf("Moving forward");
    // Add code to move CyBot forward
}

void turn_left() {
    lcd_printf("Turning left");
    // Add code to turn CyBot left
}

void move_backward() {
    lcd_printf("Moving backward");
    // Add code to move CyBot backward
}

void turn_right() {
    lcd_printf("Turning right");
    // Add code to turn CyBot right
}


int main(void) {
    button_init();
    init_button_interrupts();
    lcd_init();
    //cyBot_uart_init();        //uncomment it for part1
    cyBot_uart_init_clean();    //comment it out for part1
    cyBOT_init_Scan(0b0111);    //part3

    //right_calibration_value = 337750;
    //left_calibration_value = 1351000;

    cyBOT_Scan_t scanData;
    int raw_ir;
    int i = 0;
    int loop = 0;
    char command[100];

    // Complete this code for configuring the  (GPIO) part of UART initialization       comment this part out for part1
      SYSCTL_RCGCGPIO_R |= 0x02;
      timer_waitMillis(1);
      GPIO_PORTB_AFSEL_R |= 0x03;
      GPIO_PORTB_PCTL_R &= ~0x000000FF;
      GPIO_PORTB_PCTL_R |= 0x00000011;
      GPIO_PORTB_DEN_R |= 0x03;
      GPIO_PORTB_DIR_R &= ~0x01;
      GPIO_PORTB_DIR_R |= 0x02;

     cyBot_uart_init_last_half();


     /*char startup_message[] = "Waiting for button presses...\r\n";
         int loop;
         for (loop = 0; loop < strlen(startup_message); loop++) {
             cyBot_sendByte(startup_message[loop]);  // Send startup message to PuTTY
         }*/


    while(1)
    {
                char byte = cyBot_getByte();
                if (byte == '\n') {
                    command[i] = '\0';  // Null-terminate the string when newline is received
                    lcd_printf("Received: %s", command);  // Display the received command on the LCD

                    // Check the received command and execute corresponding actions
                    if (strcmp(command, "forward") == 0) {
                        move_forward();
                    } else if (strcmp(command, "left") == 0) {
                        turn_left();
                    } else if (strcmp(command, "backward") == 0) {
                        move_backward();
                    } else if (strcmp(command, "right") == 0) {
                        turn_right();
                    } else if (strcmp(command, "quit") == 0) {
                        lcd_printf("Quitting");
                        break;  // Exit the loop if quit command is received
                    } else {
                        lcd_printf("Unknown command: %s", command);
                    }

                    // Reset the command buffer for the next input
                    i = 0;
                } else {
                    command[i++] = byte;  // Store the received byte in the buffer
                }
            }

            return 0;


       /* cyBOT_Scan(92, &scanData);

        raw_ir = scanData.IR_raw_val;
        float distance = calculate_distance_linear(raw_ir);
        lcd_printf("Raw IR: %d\nDistance: %.2f cm", raw_ir, distance);

        char message[50];
        sprintf(message, "Raw IR Value: %d\r\n", raw_ir);
        for (i; i < strlen(message); i++) {
            cyBot_sendByte(message[i]);
        }
        timer_waitMillis(2000);



        if (button_event) {
                    lcd_printf("Button %d pressed", button_num);

                    // Send button press message to PuTTY
                    char button_message[50];
                    sprintf(button_message, "Button %d pressed\r\n", button_num);
                    for (loop; loop < strlen(button_message); loop++) {
                        cyBot_sendByte(button_message[loop]);
                    }

                    button_event = 0;
                }*/
            }
    return 0;
}





/*#include "cyBot_Scan.h"
#include "cyBot_uart.h"
#include "Timer.h"
#include "lcd.h"
#include <stdio.h>
#include <string.h>
void main() {

    timer_init();
    lcd_init();
    cyBot_uart_init();
    cyBOT_init_Scan(0b0011);

    cyBOT_Scan_t scanData;
    cyBOT_SERVO_cal();

}*/
