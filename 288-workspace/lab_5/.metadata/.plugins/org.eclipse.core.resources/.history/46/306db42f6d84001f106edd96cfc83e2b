#include "button.h"
#include "timer.h"
#include "lcd.h"
#include "cyBot_uart.h"
#include "cyBot_Scan.h"

#warning "Possible unimplemented functions"
#define REPLACEME 0

extern volatile int button_event;
extern volatile int button_num;

// Data from IR sensor calibration
float distances[] = {9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 50};
int ir_values[] = {1499, 1277, 1147, 1087, 987, 955, 919, 877, 842, 833, 803, 795, 779, 751, 731};

// Function for linear interpolation to calculate distance from raw IR value
float calculate_distance_linear(int raw_ir) {
    int i;

    // If the raw IR value is greater than the largest value, return the closest distance
    if (raw_ir >= ir_values[0]) {
        return distances[0];
    }

    // If the raw IR value is less than the smallest value, return the closest distance
    if (raw_ir <= ir_values[14]) {
        return distances[14];
    }

    // Find two points between which the raw IR value lies
    for (i = 0; i < 14; i++) {
        if (raw_ir <= ir_values[i] && raw_ir > ir_values[i + 1]) {
            // Perform linear interpolation
            float slope = (distances[i + 1] - distances[i]) / (ir_values[i + 1] - ir_values[i]);
            return distances[i] + slope * (raw_ir - ir_values[i]);
        }
    }
    return -1; // Default case, should not reach here
}

int main(void) {
    // Part 1: Button initialization and interrupts
    button_init();
    init_button_interrupts();

    // LCD initialization
    lcd_init();

    // Part 2: UART initialization (replace with cyBot_uart_init_clean() for part 2)
    cyBot_uart_init_clean();

    // Part 3: Sensor initialization
    cyBOT_init_Scan(0b0111);

    // Right and left calibration values for CyBot's servo motor
    right_calibration_value = 337750;
    left_calibration_value = 1351000;

    cyBOT_Scan_t scanData;
    int raw_ir;
    int i = 0;
    int loop = 0;

    // UART GPIO configuration (needed for part 2)
    SYSCTL_RCGCGPIO_R |= 0x02;
    timer_waitMillis(1);
    GPIO_PORTB_AFSEL_R |= 0x03;
    GPIO_PORTB_PCTL_R &= ~0x000000FF;
    GPIO_PORTB_PCTL_R |= 0x00000011;
    GPIO_PORTB_DEN_R |= 0x03;
    GPIO_PORTB_DIR_R &= ~0x01;
    GPIO_PORTB_DIR_R |= 0x02;

    // Finish UART initialization
    cyBot_uart_init_last_half();

    while (1) {
        // Part 3: Scan IR sensor and calculate distance
        cyBOT_Scan(92, &scanData);  // Scan at 90 degrees

        raw_ir = scanData.IR_raw_val;
        float distance = calculate_distance_linear(raw_ir);

        // Display raw IR and distance on the LCD
        lcd_printf("Raw IR: %d\nDist: %.2f cm", raw_ir, distance);

        // Send raw IR value over UART
        char message[50];
        sprintf(message, "Raw IR Value: %d\r\n", raw_ir);
        for (i = 0; i < strlen(message); i++) {
            cyBot_sendByte(message[i]);
        }

        // Delay for sensor stability
        timer_waitMillis(2000);

        // Part 1: Handle button press interrupts
        if (button_event) {
            lcd_printf("Button %d pressed", button_num);

            // Send button press event to PuTTY
            char button_message[50];
            sprintf(button_message, "Button %d pressed\r\n", button_num);
            for (loop = 0; loop < strlen(button_message); loop++) {
                cyBot_sendByte(button_message[loop]);
            }

            button_event = 0;  // Reset button event
        }
    }

    return 0;
}
