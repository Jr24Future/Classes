#ifndef bool
#define bool int
#define true 1
#define false 0
#endif

#include <stdint.h>
#include "inc/tm4c123gh6pm.h"
#include "driverlib/interrupt.h"
#include "Timer.h"

// Variables to store timer values for rising and falling edges
volatile uint32_t rising_edge_time = 0;
volatile uint32_t falling_edge_time = 0;
volatile int pulse_width = 0;

// Initialize PB3 for output mode for PING))) triggering
void ping_init(void) {
    SYSCTL_RCGCGPIO_R |= 0x02;  // Enable clock for Port B
    while ((SYSCTL_PRGPIO_R & 0x02) == 0) {}  // Wait for the clock to be ready

    GPIO_PORTB_DIR_R |= 0x08;  // Set PB3 as output
    GPIO_PORTB_DEN_R |= 0x08;  // Enable digital functionality on PB3
}

// Send a trigger pulse to the PING))) sensor
void ping_trigger(void) {
    GPIO_PORTB_DATA_R &= ~0x08;  // Set PB3 low
    timer_waitMicros(2);         // Wait 2 microseconds
    GPIO_PORTB_DATA_R |= 0x08;   // Set PB3 high
    timer_waitMicros(5);         // Wait 5 microseconds
    GPIO_PORTB_DATA_R &= ~0x08;  // Set PB3 low
}

// Initialize Timer 3B in input capture mode for edge detection
void ping_init_timer(void) {
    SYSCTL_RCGCTIMER_R |= 0x08;  // Enable the clock for Timer 3
    while ((SYSCTL_PRTIMER_R & 0x08) == 0) {}  // Wait for Timer 3 to be ready

    TIMER3_CTL_R &= ~0x100;  // Disable Timer 3B during configuration
    TIMER3_CFG_R = 0x4;  // Configure as 16-bit timer
    TIMER3_TBMR_R = 0x07;  // Capture mode, edge-time, count-down
    TIMER3_TBPR_R = 0xFF;  // Set prescaler to 0xFF for 24-bit range
    TIMER3_TBILR_R = 0xFFFE;  // Set interval load to avoid GPTM#11 issue
    TIMER3_IMR_R |= 0x400;  // Enable capture interrupt
    TIMER3_ICR_R |= 0x400;  // Clear interrupt flag

    NVIC_EN1_R |= 0x10;  // Enable IRQ 36 for Timer 3B
    IntMasterEnable();  // Enable global interrupts

    TIMER3_CTL_R |= 0x100;  // Enable Timer 3B
}

// Interrupt handler for Timer 3B
void Timer3B_Handler(void) {
    if (TIMER3_MIS_R & 0x400) {  // Check if capture event occurred
        uint32_t timer_value = TIMER3_TBR_R;  // Read the timer value

        // Capture the edge
        if (GPIO_PORTB_DATA_R & 0x08) {  // Rising edge
            rising_edge_time = timer_value;
        } else {  // Falling edge
            falling_edge_time = timer_value;

            // Calculate pulse width in clock cycles
            if (falling_edge_time > rising_edge_time) {
                pulse_width = (0xFFFFFF - rising_edge_time) + falling_edge_time + 1;
            } else {
                pulse_width = rising_edge_time - falling_edge_time;
            }
        }
        TIMER3_ICR_R |= 0x400;  // Clear the interrupt flag
    }
}

// Reconfigure PB3 as input for Timer 3B capture mode
void configure_pb3_input(void) {
    GPIO_PORTB_DEN_R &= ~0x08;  // Disable digital function on PB3
    GPIO_PORTB_DIR_R &= ~0x08;  // Set PB3 as input
    GPIO_PORTB_AFSEL_R |= 0x08;  // Enable alternate function on PB3
    GPIO_PORTB_PCTL_R &= ~0x0000F000;
    GPIO_PORTB_PCTL_R |= 0x00007000;  // Set PB3 to T3CCP1 function
    GPIO_PORTB_DEN_R |= 0x08;  // Enable digital functionality on PB3
}

// Main function for measuring the PING))) sensor pulse
void ping_measure(void) {
    // Step 1: Set PB3 as output and send the trigger pulse
    GPIO_PORTB_AFSEL_R &= ~0x08;  // Disable alternate function for output mode
    GPIO_PORTB_DIR_R |= 0x08;  // Set PB3 as output
    ping_trigger();  // Send the trigger pulse

    // Step 2: Reconfigure PB3 as input for Timer 3B capture mode
    configure_pb3_input();

    // Timer 3B will now handle the rising and falling edge capture through interrupts
}
