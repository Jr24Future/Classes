#include "cyBot_Scan.h"
#include "lcd.h"
#include "uart.h"
#include "timer.h"
#include "movement.h"
#include "open_interface.h"  // Assuming you have this for oi_t definition
#include <stdio.h>

// Define constants
#define SCAN_ANGLE_STEP 2
#define IR_THRESHOLD 45
#define NUM_SAMPLES 3
#define PING_AVERAGE_COUNT 5
#define TARGET_DISTANCE_CM 5

typedef struct {
    int start_angle;
    int end_angle;
    float ping_distance;
} ObjectInfo;

ObjectInfo detected_objects[10];
int object_count = 0;

volatile char uart_data;
volatile char flag = 0;

typedef enum { MANUAL, AUTONOMOUS } Mode;
Mode current_mode = AUTONOMOUS;

float distances[] = {9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 50};
int ir_values[] = {1499, 1277, 1147, 1087, 987, 955, 919, 877, 842, 833, 803, 795, 779, 751, 731};

// Function prototypes
float calculate_distance_linear(int raw_ir);
void setup();
void perform_180_ir_scan(cyBOT_Scan_t *scanData);
void refine_object_detection_with_ping(cyBOT_Scan_t *scanData);
void display_smallest_object(cyBOT_Scan_t *scanData);
void navigate_to_smallest_object(cyBOT_Scan_t *scanData, oi_t *sensor_data, int object_index);
void control_movement(oi_t *sensor_data, char command);

float calculate_distance_linear(int raw_ir) {
    int i;
    if (raw_ir >= ir_values[0]) {
        return distances[0];
    }
    if (raw_ir <= ir_values[14]) {
        return distances[14];
    }
    for (i = 0; i < 14; i++) {
        if (raw_ir <= ir_values[i] && raw_ir > ir_values[i + 1]) {
            float slope = (distances[i + 1] - distances[i]) / (float)(ir_values[i + 1] - ir_values[i]);
            return distances[i] + slope * (raw_ir - ir_values[i]);
        }
    }
    return -1;
}

void setup() {
    uart_init(115200);
    lcd_init();
    timer_init();
    uart_interrupt_init();
    cyBOT_init_Scan(0b0111);

    right_calibration_value = 343000;
    left_calibration_value = 1340500;
}

void control_movement(oi_t *sensor_data, char command) {
    switch (command) {
        case 'w':
            move_forward(sensor_data, 10); // Move forward by 10 cm
            break;
        case 'a':
            turn_counter_clockwise(sensor_data, 15); // Turn left by 15 degrees
            break;
        case 's':
            move_backwards(sensor_data, 10); // Move backward by 10 cm
            break;
        case 'd':
            turn_clockwise(sensor_data, 15); // Turn right by 15 degrees
            break;
        default:
            uart_sendStr("Invalid movement command.\n");
            break;
    }
}

void perform_180_ir_scan(cyBOT_Scan_t *scanData) {
    int angle;
    int i;
    int raw_ir_sum;
    float ir_average;
    int in_object = 0;
    int start_angle = -1;

    uart_sendStr("\nIR Scan Results:\n");
    uart_sendStr("Angle\tIR Distance (cm)\n");
    uart_sendStr("--------------------------\n");

    for (angle = 0; angle <= 180; angle += SCAN_ANGLE_STEP) {
        raw_ir_sum = 0;

        for (i = 0; i < NUM_SAMPLES; i++) {
            cyBOT_Scan(angle, scanData);
            raw_ir_sum += scanData->IR_raw_val;
            timer_waitMillis(50);
        }

        ir_average = raw_ir_sum / (float)NUM_SAMPLES;
        float ir_distance = calculate_distance_linear(ir_average);

        char message[50];
        snprintf(message, sizeof(message), "Angle: %d\tIR Distance: %.2f cm\n", angle, ir_distance);
        uart_sendStr(message);

        if (ir_distance < IR_THRESHOLD && !in_object) {
            in_object = 1;
            start_angle = angle;
        } else if (ir_distance >= IR_THRESHOLD && in_object) {
            in_object = 0;
            detected_objects[object_count].start_angle = start_angle;
            detected_objects[object_count].end_angle = angle;
            object_count++;
        }
    }

    uart_sendStr("\nDetected Objects:\n");
    uart_sendStr("Object\tStart Angle\tEnd Angle\n");
    uart_sendStr("--------------------------------\n");
    for (i = 0; i < object_count; i++) {
        char message[50];
        snprintf(message, sizeof(message), "Object %d\t%d\t\t%d\n", i + 1, detected_objects[i].start_angle, detected_objects[i].end_angle);
        uart_sendStr(message);
    }
}

void refine_object_detection_with_ping(cyBOT_Scan_t *scanData) {
    int i, j;

    uart_sendStr("\nRefined PING Measurement Results:\n");
    uart_sendStr("Object\tMid Angle\tPING Distance (cm)\n");
    uart_sendStr("--------------------------------------\n");

    for (i = 0; i < object_count; i++) {
        int mid_angle = (detected_objects[i].start_angle + detected_objects[i].end_angle) / 2;
        float ping_sum = 0.0;

        for (j = 0; j < PING_AVERAGE_COUNT; j++) {
            cyBOT_Scan(mid_angle, scanData);
            ping_sum += scanData->sound_dist;
            timer_waitMillis(50);
        }

        detected_objects[i].ping_distance = ping_sum / PING_AVERAGE_COUNT;

        char message[100];
        snprintf(message, sizeof(message), "Object %d\tAngle: %d\tPING Distance: %.2f cm\n", i + 1, mid_angle, detected_objects[i].ping_distance);
        uart_sendStr(message);
    }

    display_smallest_object(scanData);
}

void display_smallest_object(cyBOT_Scan_t *scanData) {
    if (object_count == 0) {
        uart_sendStr("\nNo objects detected.\n");
        return;
    }

    int i;
    int smallest_index = 0;
    float smallest_width = detected_objects[0].end_angle - detected_objects[0].start_angle;

    for (i = 1; i < object_count; i++) {
        float width = detected_objects[i].end_angle - detected_objects[i].start_angle;
        if (width < smallest_width) {
            smallest_width = width;
            smallest_index = i;
        }
    }

    uart_sendStr("\nSmallest object detected:\n");
    char message[100];
    snprintf(message, sizeof(message),
             "Start Angle: %d, End Angle: %d, PING Distance: %.2f cm\n",
             detected_objects[smallest_index].start_angle,
             detected_objects[smallest_index].end_angle,
             detected_objects[smallest_index].ping_distance);
    uart_sendStr(message);
}

void navigate_to_smallest_object(cyBOT_Scan_t *scanData, oi_t *sensor_data, int smallest_index) {
    int target_angle = (detected_objects[smallest_index].start_angle + detected_objects[smallest_index].end_angle) / 2;
    float ping_distance = detected_objects[smallest_index].ping_distance - 7.0; // Adjusting for sensor placement
    char message[80];

    snprintf(message, sizeof(message), "Turning to Mid Angle: %d degrees\n", target_angle);
    uart_sendStr(message);
    lcd_printf("Turning to %d deg", target_angle);

    // Determine turning direction based on the target angle
    if (target_angle < 90) {
        // Target is on the right side of the CyBot, turn clockwise
        turn_clockwise(sensor_data, 90 - target_angle);
    } else {
        // Target is on the left side of the CyBot, turn counter-clockwise
        turn_counter_clockwise(sensor_data, target_angle - 90);
    }

    // Start moving towards the object
    snprintf(message, sizeof(message), "Moving towards object at %d degrees\n", target_angle);
    uart_sendStr(message);
    lcd_printf("Moving to %d cm", (int)ping_distance);

    // Loop until we are within 5 cm of the object
    while (ping_distance > TARGET_DISTANCE_CM) {
        int move_distance = 5;

        // Determine the movement distance
        if (ping_distance > 12.0) {
            move_distance = 15;
        }

        // Move forward in determined increments
        snprintf(message, sizeof(message), "Moving %d cm towards object\n", move_distance);
        uart_sendStr(message);
        move_forward(sensor_data, move_distance);

        // After each movement, perform a new scan around the area of interest
        int start_scan_angle = 70;
        int end_scan_angle = 110;
        int angle;
        int i;
        float closest_distance = 1000;  // Initialize with a large value
        int closest_angle = target_angle;

        // Scan from 70 to 110 degrees to find the closest object
        for (angle = start_scan_angle; angle <= end_scan_angle; angle += SCAN_ANGLE_STEP) {
            float ping_sum = 0.0;

            // Take multiple PING measurements for averaging
            for (i = 0; i < PING_AVERAGE_COUNT; i++) {
                cyBOT_Scan(angle, scanData);
                ping_sum += scanData->sound_dist;

                // Delay for sensor stabilization
                timer_waitMillis(50);
            }

            // Calculate the average PING distance and adjust it
            float average_ping_distance = (ping_sum / PING_AVERAGE_COUNT) - 7.0; // Subtracting 5 cm to account for sensor offset

            // Check if this is the closest object detected so far
            if (average_ping_distance < closest_distance) {
                closest_distance = average_ping_distance;
                closest_angle = angle;
            }

            // Debug message for each scan
            snprintf(message, sizeof(message), "Scan Angle: %d, PING Distance: %.2f cm\n", angle, average_ping_distance);
            uart_sendStr(message);
        }

        // Update the target angle and distance
        target_angle = closest_angle;
        ping_distance = closest_distance;

        // Adjust the direction if necessary
        snprintf(message, sizeof(message), "Adjusting direction to Angle: %d degrees\n", target_angle);
        uart_sendStr(message);
        lcd_printf("Adjusting to %d deg", target_angle);

        if (target_angle < 90) {
            // Target is on the right side of the CyBot, turn clockwise
            turn_clockwise(sensor_data, 90 - target_angle);
        } else if (target_angle > 90) {
            // Target is on the left side of the CyBot, turn counter-clockwise
            turn_counter_clockwise(sensor_data, target_angle - 90);
        }
    }

    // Stop once the CyBot is within the target distance
    snprintf(message, sizeof(message), "Arrived within %.2f cm of the object.\n", ping_distance);
    uart_sendStr(message);
    lcd_printf("Arrived at %.2f cm", ping_distance);
}



int main(void) {
    setup();

    cyBOT_Scan_t scanData;
    oi_t *sensor_data = oi_alloc();
    oi_init(sensor_data);
    int i;

    uart_sendStr("Press 't' to toggle modes (Manual/Autonomous), 'm' to scan and navigate in autonomous mode, or 'q' to quit.\n");

    while (1) {
        if (flag) {
            flag = 0;

            if (uart_data == 't') {
                // Toggle between manual and autonomous modes
                if (current_mode == AUTONOMOUS) {
                    current_mode = MANUAL;
                    uart_sendStr("Switched to Manual Mode. Use 'w', 'a', 's', 'd' to control the CyBot.\n");
                } else {
                    current_mode = AUTONOMOUS;
                    uart_sendStr("Switched to Autonomous Mode. Press 'm' to scan and navigate.\n");
                }
            } else if (uart_data == 'm' && current_mode == AUTONOMOUS) {
                lcd_clear();
                lcd_printf("Performing Scan...");

                // Reset the object count before scanning
                object_count = 0;

                // Perform 180-degree scan using IR sensor
                perform_180_ir_scan(&scanData);

                // Refine detected objects using the PING sensor
                refine_object_detection_with_ping(&scanData);

                // If we have detected objects, navigate to the smallest object
                if (object_count > 0) {
                    // Find the smallest object
                    int smallest_index = 0;
                    float smallest_width = detected_objects[0].end_angle - detected_objects[0].start_angle;

                    for (i = 1; i < object_count; i++) {
                        float width = detected_objects[i].end_angle - detected_objects[i].start_angle;
                        if (width < smallest_width) {
                            smallest_width = width;
                            smallest_index = i;
                        }
                    }

                    // Display the smallest object details
                    display_smallest_object(&scanData);

                    // Navigate to the smallest object
                    navigate_to_smallest_object(&scanData, sensor_data, smallest_index);
                }

                // Prompt user to scan again or quit
                uart_sendStr("\nPress 'm' to scan again, 't' to toggle modes, or 'q' to quit.\n");
            } else if (current_mode == MANUAL) {
                // Manual mode movement controls
                control_movement(sensor_data, uart_data);
            } else if (uart_data == 'q') {
                uart_sendStr("Quitting the application.\n");
                oi_free(sensor_data);
                break;
            } else {
                uart_sendStr("Invalid command. Press 't' to toggle modes, 'm' to scan or 'q' to quit.\n");
            }
        }
    }

    return 0;
}
